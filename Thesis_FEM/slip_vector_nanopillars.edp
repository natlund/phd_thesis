// slip_vector_nanopillars.edp

// Callable from command line (or Python) like this:
// FreeFem++ Natslip.edp 40 0.2 4
// Passing parameters 'm' = 40, 'amp' = 20, 'periods' = 4
//    where amp is 100 times the desired roughness amplitude -
//    e.g. '20' gives amplitude = 0.2

int m;        // number of mesh nodes on top boundary
real amp;        // Amplitude of roughness.
int periods;   // number of periods in domain.

try { string periodstr = ARGV[ARGV.n-1];
      string    ampstr = ARGV[ARGV.n-2];
      string      mstr = ARGV[ARGV.n-3];
      periods = atoi(periodstr); // zero if string not a number.
    int centh = atoi(ampstr);  // atof fails on '0.2' on Linux!
          amp = centh/100.0;  // so use integer for 100 * roughness.
            m = atoi(mstr);
      cout << "Parameter passed: 100x roughness is " << ampstr << endl;
      cout << "Parameter converted: roughness h = " << amp << endl;
      cout << "Parameter passed: periods = " << periodstr << endl;
      cout << "Parameter converted: periods " << periods <<endl;

      if (m == 0) {m = 20;}  // If no m passed, set default m=20.
      real testifcastsuccessful = 1.0/periods;}

catch (...) { cout << endl;
       cout << "No valid parameters passed; defaults used.";
       cout << endl << endl;
       periods = 2; amp = 1.0; m = 20;}

real width = 10.0;
real height = 2.0*width;
real side = width*2.0;   // size of upper sides of domain
real quart = width/4.0; 
real bmin = 1.0;    // Minimum slip length.

real k = periods*2*pi/width;
real h = amp/k;    // so surface height and period reduce together. 

border top(t=width,0)        {x=t;    y=height;}
border upperleft(t=height,quart)   {x=0;    y=t;}
border lowerleft(t=quart,0) {x=0;    y=t;}
border upperright(t=quart,height)  {x=width; y=t;}
border lowerright(t=0,quart){x=width; y=t;}
border bottom(t=0,width)     {x=t;    y=0;}
border slip(t=0,width)       {x=t;    y=h*sin(k*x);}

// The mesh is finegrained at and near the sinusoidal surface.
// The mesh is adaptive; more triangles are used as the period
// decreases.  But, can force the use of many triangles even
// for long period sinewave by passing the parameter m.

int finemesh = periods*(m<periods) + m*(m>=periods);
int mainmesh = finemesh*(finemesh<100) + 80*(finemesh>=100);
// mainmesh is limited to 80 mesh points; any more kills FreeFem++

cout << "finemesh: " << finemesh << endl;
cout << "mainmesh: " << mainmesh << endl << endl;

mesh Th = buildmesh(slip(6*finemesh)+lowerright(finemesh)+upperright(3.0*mainmesh)
                    +top(1.5*mainmesh)+upperleft(3.0*mainmesh)+lowerleft(finemesh));

plot(Th);


fespace Vh(Th, P2, periodic = [[lowerleft,y],[lowerright,y],
                               [upperleft,y],[upperright,y]]);

Vh ux, uy, vx, vy;   // unknown and test functions.

func farshear = 1.0;    // imposed far-field shear rate.

real bdiff = height/5;    // Amplitude of slip length variation.
//func b = bmin+bdiff + bdiff*sin(k*x); //sinusoidal slip.
func b = bmin + bdiff*(sin(k*x)<0);  // Square wave slip.
// Boolean (a>0) evaluates to 0 or 1
// Nanopillars: High slip in troughs of sinusoidal surface.


// Full vector Stokes equations with full generalized
// Navier slip condition using Deformation Rate Tensor.


macro epsilon(u1,u2) [dx(u1), dy(u2), (dy(u1)+dx(u2))/sqrt(2)] // EOM
// Copied from Philip Zhang's script. Need to understand...

problem sliplaplace([ux,uy],[vx,vy]) = 
        int2d(Th) ( epsilon(ux,uy) '*epsilon(vx,vy)*2) // Stokes
      + int1d(Th,top) ( -farshear*vx )    // top shear BC
      + on(top, uy = 0)                   // x flow only at top.
      + int1d(Th,slip) ( ux*vx/b + uy*vy/b )  // slip BC.
                              ;

sliplaplace;

//plot([ux,uy]);
plot(ux);

real L = width/periods;

// Shear rate at top of domain is set to unity.
// Therefore, if no slip, then top velocity = height.
// Generally, top velocity = height + b_far.
// Top velocity will be the maximum of the flow field u.
real bfar = ux[].max - height;

real bmax = bmin + bdiff;
real bharm = 1/ ( ( 1/bmin + 1/bmax )/2 ) ;
real bavg = (bmin + bmax)/2;

cout << endl << "L: " << L << endl;
cout << endl << "b_min: " << bmin << endl;
cout << endl << "b_max: " << bmax << endl;
cout << endl << "b_far: " << bfar << endl;
cout << endl << "Harmonic mean slip length: " << bharm << endl;
cout << endl << "Mean slip length: " << bavg << endl;
cout << endl;

// Far slip  is greater if the high slip regions
// are on the peaks of the surface.
// Not surprising, really.

// Our formula derives from the limit of vanishing roughness.
// This implies a b_eff at the point in space at the average
// height of the sinusoidal roughness.
// Hence, the b_far calculated above is appropriate. (u.max - size.)

// Could add arc length correction to harmonic mean, but
// arc length is elliptic integral; not trivial in FreeFEM++
// Therefore, do it (and everything else) in Python.
